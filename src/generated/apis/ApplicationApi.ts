/* tslint:disable */
/* eslint-disable */
/**
 * Manatee API
 * Candidate application management API codenamed \"Manatee\" is a mockup of a real system, where recruiters can view new applications and follow a process until successful onboarding.   
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Application,
} from '../models/index';
import {
    ApplicationFromJSON,
    ApplicationToJSON,
} from '../models/index';

export interface AddApplicationRequest {
    application: Application;
}

export interface RejectApplicationRequest {
    applicationId: number;
}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI {

    /**
     * Submits a new applications and instantiates it with a new state.
     * Submits new applications.
     */
    async addApplicationRaw(requestParameters: AddApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters['application'] == null) {
            throw new runtime.RequiredError(
                'application',
                'Required parameter "application" was null or undefined when calling addApplication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationToJSON(requestParameters['application']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Submits a new applications and instantiates it with a new state.
     * Submits new applications.
     */
    async addApplication(requestParameters: AddApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application> {
        const response = await this.addApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Selects all applications stored in database and returns them as an array.
     * Queries all applications.
     */
    async getApplicationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Application>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationFromJSON));
    }

    /**
     * Selects all applications stored in database and returns them as an array.
     * Queries all applications.
     */
    async getApplications(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Application>> {
        const response = await this.getApplicationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Find the applications and performs a state transition to rejected state.
     * Rejects an applications with given Id.
     */
    async rejectApplicationRaw(requestParameters: RejectApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling rejectApplication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters['applicationId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find the applications and performs a state transition to rejected state.
     * Rejects an applications with given Id.
     */
    async rejectApplication(requestParameters: RejectApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rejectApplicationRaw(requestParameters, initOverrides);
    }

}
